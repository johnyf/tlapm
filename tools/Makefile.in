# Copyright (C) 2008  INRIA and Microsoft Corporation

INSTALL = @INSTALL@

prefix = @prefix@
exec_prefix = @exec_prefix@

srcdir          = @srcdir@
VPATH           = @srcdir@

bindir          = @bindir@
LIBPATH		= @libdir@/tlaps

all: check-configure tlapm@EXE@

.PHONY:check-configure
check-configure: configure
	@if test "${srcdir}/configure" -nt "${srcdir}/Makefile" ; then \
	  echo "WARNING! ${srcdir}/configure is more recent than ${srcdir}/Makefile" ; \
	  echo "Running ${srcdir}/configure again..." ; \
	  ${MAKE} same-justconf CONFIGARGS="--silent" ; \
	  echo "Finished ${srcdir}/configure; 'make' will now exit." ; \
	  echo "Please run 'make' again to continue." ; \
	  exit 1 ; \
	fi

.PHONY: tlapm@EXE@
tlapm@EXE@:
	rm -f tlapm@EXE@
	${MAKE} -C src tlapm.native
	cp src/tlapm.native tlapm@EXE@

.PHONY: utest
utest:
	: ----------------------- unit tests ----------------------
	${MAKE} -C src utest
	RESOURCE_FOLDER=test/resources/ src/tlapm.byte --version

.PHONY: test
test:
	: ----------------------- unit tests ----------------------
	${MAKE} -C src clean >/dev/null 2>&1
	${MAKE} -C src utest
	RESOURCE_FOLDER=test/resources/ src/tlapm.byte --version
	${MAKE} -C src clean >/dev/null 2>&1
	: --------------------fast regression tests -------------------
	${MAKE} tlapm >/dev/null 2>&1
	cd test && ${MAKE}
	${MAKE} clean >/dev/null 2>&1

.PHONY: jtest
jtest:
	: ----------------------- unit tests ----------------------
	${MAKE} -C src clean >/dev/null 2>&1
	${MAKE} -C src utest
	Jenkins=1 RESOURCE_FOLDER=test/resources/ src/tlapm.byte --version
	${MAKE} -C src clean >/dev/null 2>&1
	: -------------------- soundness tests -------------------
	${MAKE} tlapm >/dev/null 2>&1
	cd test && ${MAKE} stest
	: -------------------- regression tests -------------------
	cd test && ${MAKE} junit
	${MAKE} clean >/dev/null 2>&1

.PHONY: testall
testall:
	cd test && ${MAKE} all

.PHONY: clean
clean:
	${MAKE} -C src clean
	rm -f tlapm@EXE@

.PHONY: distclean
distclean: clean
	rm -f config.*
	rm -rf autom4te.*
	rm -f Makefile myocamlbuild.ml src/config.ml src/load.ml
	rm -f tools/installer/tlaps-release.sh
	rm -f tools/installer/tlaps-source-release.sh

.PHONY: testbuild
testbuild:
	cd tools/installer/ && ./tlaps-release.sh
	cd test/ && ../tools/installer/tlaps-1.4.5-x86_64-linux-gnu-inst.bin -d `pwd`
	cd test/ && make clean && make all

.PHONY: allinstall
allinstall: all
	${MAKE} install

.PHONY: install
install:
	mkdir -p -m 0755 ${bindir}
	${INSTALL} -s -m 0755 tlapm@EXE@ ${bindir}
	@if test "x${SILENT}" != xyes ; then \
	  echo '' ; \
	  echo 'The TLA+ Proof Manager (tlapm@EXE@) has been installed to' ; \
	  echo '' ; \
	  echo '        ' ${bindir} ; \
	  echo '' ; \
	  if test "no`which tlapm`" = "no" ; then \
	    echo '' ; \
	    echo "WARNING: ${bindir} is not in your PATH" ; \
	  fi ; \
	fi
	mkdir -p -m 0755 ${LIBPATH}
	${INSTALL} -m 0644 library/*.tla ${LIBPATH}
	@TAR@ -cf - examples | ( cd ${LIBPATH} && @TAR@ -xf - )

.PHONY: uninstall
uninstall:
	rm -f ${bindir}/tlapm@EXE@
	if test -n "`ls -A ${LIBPATH}`"; \
	  then rm -rf ${LIBPATH} ; \
	fi

.PHONY: newversion
newversion:
	ocaml str.cma unix.cma tools/newversion.ml ${NEWVERARGS}

.PHONY: release
release:
	ocaml str.cma unix.cma tools/newversion.ml -release ${NEWVERARGS}

.PHONY: sameversion
sameversion:
	${MAKE} newversion NEWVERARGS="-same"

.PHONY: same
same:
	@  ${MAKE} same-justconf CONFIGARGS="--silent" \
	&& ${MAKE} SILENT=yes all

.PHONY: same-justconf
same-justconf:
	./configure ${CONFIGARGS} \
	  --prefix @prefix@ \
	  --enable-debugging=@enable_debugging@ \
	  --enable-profiling=@enable_profiling@

.PHONY: same-full
same-full:
	@  ${MAKE} newversion NEWVERARGS="-quiet -same" \
	&& ${MAKE} same-justconf CONFIGARGS="--silent" \
	&& ${MAKE} SILENT=yes all

.PHONY: emacs
emacs:
	svn --force export svn+ssh://${MSR_SVN_USER}@svn.msr-inria.inria.fr/var/lib/svn/repository/tla/trunk/misc/tla-mode doc/web/tla-mode

.PHONY: web
web: same-justconf emacs
